# -*- coding: utf-8 -*-
"""Matiks dataanalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hMzLDvR6qCcRe7jKSvTfvHKI10r8f-MC
"""

import streamlit as st
import pandas as pd
import plotly.express as px
from sklearn.mixture import GaussianMixture
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import seaborn as sns

url = "https://docs.google.com/spreadsheets/d/1NyFJYCi5wF8QD0FIfxlyvYKksnnbKExzXOjioE_1hWA/export?format=csv&gid=0"

df = pd.read_csv(url)
df.head()

# Preprocessing
st.title("üéÆ User Behavior Dashboard")



df['Last_Login'] = pd.to_datetime(df['Last_Login'], format="%d-%b-%Y", errors='coerce')
df['Last_Login'] = df['Last_Login'].dt.date
df['Last_Login'] = pd.to_datetime(df['Last_Login'])

# Sidebar filters
st.sidebar.header("üîé Filter Data")
selected_Device_Type = st.sidebar.multiselect("Device_Type", options=df['Device_Type'].unique(), default=df['Device_Type'].unique())
selected_mode = st.sidebar.multiselect("Preferred_Game_Mode", options=df['Preferred_Game_Mode'].unique(), default=df['Preferred_Game_Mode'].unique())

# Apply filters
df = df[df['Device_Type'].isin(selected_Device_Type) & df['Preferred_Game_Mode'].isin(selected_mode)]

# Layout with tabs
tabs = st.tabs(["Overview", "Engagement", "Churn & Segments", "Revenue & Funnel", "Recommendations", "Notebook Charts"])

# --- Overview Tab ---
with tabs[0]:
    st.header("üìä Key Metrics")
    st.metric("Total Users", df['User_ID'].nunique())
    st.metric("Total_Revenue_USD ($)", round(df['Total_Revenue_USD'].sum(), 2))
    st.metric("Avg Sessions/User", round(df['Total_Play_Sessions'].mean(), 2))

    st.subheader("Users by Preferred_Game_Mode")
    fig = px.bar(df.groupby('Preferred_Game_Mode')['Total_Play_Sessions'].sum().reset_index(), x='Preferred_Game_Mode', y='Total_Play_Sessions', title='Sessions by Game Mode')
    st.plotly_chart(fig)

# --- Engagement Tab ---
with tabs[1]:
    st.header("üìÖ DAU / WAU / MAU")
    daily_active = df.groupby('Signup_Date')['User_ID'].nunique().reset_index(name='DAU')
   # weekly_active = df.groupby(df['Last_Login'].dt.to_period("W"))['User_ID'].nunique().reset_index(name='WAU')
    #monthly_active = df.groupby(df['Last_Login'].dt.to_period("M"))['User_ID'].nunique().reset_index(name='MAU')

    weekly_active = df.groupby(df['Last_Login'].dt.to_period("W").astype(str))['User_ID'].nunique().reset_index(name='WAU')
    monthly_active = df.groupby(df['Last_Login'].dt.to_period("M").astype(str))['User_ID'].nunique().reset_index(name='MAU')

    st.subheader("Daily Active Users")
    st.plotly_chart(px.line(daily_active, x='Signup_Date', y='DAU'))

    st.subheader("Weekly Active Users")
    st.plotly_chart(px.line(weekly_active, x='Last_Login', y='WAU'))

    st.subheader("Monthly Active Users")
    st.plotly_chart(px.line(monthly_active, x='Last_Login', y='MAU'))

# --- Churn & Segments Tab ---
with tabs[2]:
    st.header("‚ö†Ô∏è Churn Detection")
    churn_df = df[df['Last_Login'] < datetime.now() - timedelta(days=30)]
    st.write(f"Users inactive > 30 days: {churn_df.shape[0]}")
    st.dataframe(churn_df[['User_ID', 'Total_Play_Sessions', 'Last_Login']])



    st.header("üîç User Segmentation (GMM)")
    seg_data = df[['Total_Play_Sessions', 'Total_Revenue_USD']].dropna()
    gmm = GaussianMixture(n_components=3, random_state=42)
    gmm.fit(seg_data)
    seg_data['Cluster'] = gmm.predict(seg_data)
    fig2 = px.scatter(seg_data, x='Total_Play_Sessions', y='Total_Revenue_USD', color='Cluster', title='User Clusters')
    st.plotly_chart(fig2)

# --- Total_Revenue_USD & Funnel Tab ---
with tabs[3]:
    st.header("üí∞ Revenue Trends")
    rev_trend = df.groupby(df['Last_Login'].dt.to_period("M").astype(str))['Total_Revenue_USD'].sum().reset_index()
    st.plotly_chart(px.line(rev_trend, x='Last_Login', y='Total_Revenue_USD', title='Monthly Total_Revenue_USD'))


    st.header("üóìÔ∏è Cohort Analysis")
    df['Last_Login'] = pd.to_datetime(df['Last_Login'], errors='coerce', dayfirst=True)
    df['Signup_Date'] = pd.to_datetime(df['Signup_Date'], errors='coerce', dayfirst=True)

    df['Cohort Month'] = df['Signup_Date'].dt.to_period('M').astype(str)

    cohort_data = df.groupby(['Cohort Month'])['User_ID'].nunique().reset_index(name='New Users')
    st.plotly_chart(px.bar(cohort_data, x='Cohort Month', y='New Users', title='New Users by Cohort'))

    st.header("üîÑ Funnel Tracking")
    funnel_stages = {
        'Signed Up': 'Signed_Up',
        'Played First Game': 'Played_First_Game',
        'Repeat Session': 'Repeat_Session',
        'Made Purchase': 'Made_Purchase'
    }

    valid_stages = []
    user_counts = []

    for stage_name, column_name in funnel_stages.items():
        if column_name in df.columns:
            valid_stages.append(stage_name)
            user_counts.append(df[column_name].sum())

    if valid_stages:
        funnel = pd.DataFrame({'Stage': valid_stages, 'Users': user_counts})
        st.plotly_chart(px.bar(funnel, x='Stage', y='Users', title='User Funnel'))
    else:
        st.warning("No funnel stages found in the dataset. Please include at least one of: Played_First_Game, Repeat_Session, Made_Purchase.")

# --- Recommendations Tab ---
with tabs[4]:
    st.header("üåü Insights & Recommendations")

    st.subheader("High Retention Users")
    high_retention = df[df['Total_Play_Sessions'] > df['Total_Play_Sessions'].quantile(0.9)]
    st.dataframe(high_retention[['User_ID', 'Total_Revenue_USD', 'Total_Play_Sessions', 'Last_Login']])

    st.subheader("Active but Low Total_Revenue_USD")
    low_Total_Revenue_USD_active = df[(df['Total_Revenue_USD'] < df['Total_Revenue_USD'].median()) & (df['Total_Play_Sessions'] > df['Total_Play_Sessions'].median())]
    st.dataframe(low_Total_Revenue_USD_active[['User_ID', 'Total_Revenue_USD', 'Total_Play_Sessions']])

    st.markdown("""
    ### üìå Strategic Recommendations
    - üéØ Target active users with low Total_Revenue_USD using upsell bundles and exclusive offers.
    - üîÅ Trigger re-engagement emails for users inactive > 30 days.
    - üí° Enhance onboarding flow with tips, tutorials, and reminders.
    - üß† Use cluster insights to drive personalized messaging and feature targeting.
    - üéÆ Double down on most-played modes with incentives or expansions.
    """)

# --- Notebook Charts Tab ---
with tabs[5]:
    st.header("üìì Extra Visuals for Notebook Use")
    st.subheader("Seaborn Total_Revenue_USD Distribution")
    fig, ax = plt.subplots()
    sns.histplot(df['Total_Revenue_USD'], kde=True, ax=ax)
    st.pyplot(fig)

    st.subheader("Seaborn Play Sessions by Device")
    fig2, ax2 = plt.subplots()
    sns.boxplot(data=df, x='Device_Type', y='Total_Play_Sessions', ax=ax2)
    st.pyplot(fig2)
