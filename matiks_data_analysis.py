# -*- coding: utf-8 -*-
"""Matiks data analysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m7fLhV7gVr0l7WIrNlGe2dJDckHNGTnv
"""

# Commented out IPython magic to ensure Python compatibility.
#importing all libraries

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline

import pandas as pd

url = "https://docs.google.com/spreadsheets/d/1NyFJYCi5wF8QD0FIfxlyvYKksnnbKExzXOjioE_1hWA/export?format=csv&gid=0"

df = pd.read_csv(url)
df.head()

#descriptive analysis

df.count()

df.describe()

df.isnull()



import streamlit as st
import seaborn as sns

st.header("📊 Key Metrics")
st.write("**Total Users:**", df['User_ID'].nunique())
st.write("**Total Revenue:** $", round(df['Total_Revenue_USD'].sum(), 2))
st.write("**Average Sessions per User:**", round(df['Total_Play_Sessions'].mean(), 2))

# Behavioral Pattern
st.header("📅 Behavioral Patterns")
st.bar_chart(df.groupby('Preferred_Game_Mode')['Total_Play_Sessions'].sum())

# Session vs Revenue Scatter
st.header("💰 Session Frequency vs Revenue")
fig1, ax1 = plt.subplots()
sns.scatterplot(data=df, x='Total_Play_Sessions', y='Total_Revenue_USD', hue='Device_Type', ax=ax1)
st.pyplot(fig1)

st.sidebar.header("🔎 Filter Data")
selected_device = st.sidebar.multiselect("Device", options=df['Device_Type'].unique(), default=df['Device_Type'].unique())
selected_mode = st.sidebar.multiselect("Preferred Mode", options=df['Preferred_Game_Mode'].unique(), default=df['Preferred_Game_Mode'].unique())


# Apply filters
df = df[df['Device_Type'].isin(selected_device) & df['Preferred_Game_Mode'].isin(selected_mode)]

print(df[df['Device_Type'].isin(selected_device) & df['Preferred_Game_Mode'].isin(selected_mode)])

st.header("📊 Key Metrics")
st.metric("Total Users", df['User_ID'].nunique())
st.metric("Total Revenue ($)", round(df['Total_Revenue_USD'].sum(), 2))
st.metric("Avg Sessions/User", round(df['Total_Play_Sessions'].mean(), 2))

# Behavioral Pattern
st.header("📅 Behavioral Patterns")
st.bar_chart(df.groupby('Preferred_Game_Mode')['Total_Play_Sessions'].sum())

# Session vs Total_Revenue_USD Scatter
st.header("💰 Session Frequency vs Total_Revenue_USD")
fig1, ax1 = plt.subplots()
sns.scatterplot(data=df, x='Total_Play_Sessions', y='Total_Revenue_USD', hue='Device_Type', ax=ax1)
st.pyplot(fig1)

# Ensure Last_Login column is parsed correctly and safely
df['Last_Login'] = pd.to_datetime(df['Last_Login'], errors='coerce', dayfirst=True)

# Filter users who haven't logged in for 30+ days
cutoff_date = pd.Timestamp.now() - pd.Timedelta(days=30)
churn_df = df[df['Last_Login'] < cutoff_date]

# Drop rows where Last_Login couldn't be parsed (NaT)
churn_df = churn_df.dropna(subset=['Last_Login'])

# Output
st.write(f"Churned Users: {churn_df.shape[0]}")
st.dataframe(churn_df[['User_ID', 'Total_Play_Sessions', 'Last_Login']])

from sklearn.mixture import GaussianMixture

st.header("🔍 User Segmentation with GMM")

# Step 1: Prepare the data
features = ['Total_Play_Sessions', 'Total_Revenue_USD']
seg_data = df[features].dropna()

# Step 2: Fit GMM
gmm = GaussianMixture(n_components=3, random_state=42)
gmm.fit(seg_data)

features = ['Total_Play_Sessions', 'Total_Revenue_USD']
X = df[features].dropna()

gmm = GaussianMixture(n_components=3, random_state=42)
gmm.fit(X)

# Always predict using only the original features
labels = gmm.predict(X)
probs = gmm.predict_proba(X).max(axis=1)

# Append results safely
seg_data = X.copy()
seg_data['Cluster'] = labels
seg_data['Cluster Prob'] = probs

fig2, ax2 = plt.subplots()
sns.scatterplot(
    data=seg_data,
    x='Total_Play_Sessions',
    y='Total_Revenue_USD',
    hue='Cluster',
    palette='Set2',
    ax=ax2
)
st.pyplot(fig2)

# Cohort Analysis
st.header("🗓️ Cohort Analysis")
df['Signup_Date'] = pd.to_datetime(df['Signup_Date'])
df['Cohort_Month'] = df['Signup_Date'].dt.to_period('M')
cohort_data = df.groupby(['Cohort_Month'])['User_ID'].nunique().reset_index()
cohort_data.columns = ['Cohort_Month', 'New Users']
fig3, ax3 = plt.subplots()
sns.barplot(data=cohort_data, x='Cohort_Month', y='New Users', ax=ax3)
plt.xticks(rotation=45)
st.pyplot(fig3)

funnel_stages = ['Signed_Up', 'Played_First_Game', 'Repeat_Session', 'Made_Purchase']

# Filter stages that exist in df.columns
stages_present = [stage for stage in funnel_stages if stage in df.columns]

funnel = pd.DataFrame({
    'Stage': stages_present,
    'Users': [df[stage].sum() for stage in stages_present]
})

# Deep Dive: Top Retention Users
st.header("🌟 High Retention Users")
high_retention = df[df['Total_Play_Sessions'] > df['Total_Play_Sessions'].quantile(0.9)]
st.dataframe(high_retention[['User_ID', 'Total_Revenue_USD', 'Total_Play_Sessions', 'Last_Login']])

# Deep Dive: Low Total_Revenue_USD but Active
st.header("📉 Active Users with Low Total_Revenue_USD")
low_Total_Revenue_USD_active = df[(df['Total_Revenue_USD'] < df['Total_Revenue_USD'].median()) & (df['Total_Play_Sessions'] > df['Total_Play_Sessions'].median())]
st.dataframe(low_Total_Revenue_USD_active[['User_ID', 'Total_Revenue_USD', 'Total_Play_Sessions']])




